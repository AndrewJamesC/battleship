(()=>{"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}function e(e,r){for(var i=0;i<r.length;i++){var n=r[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(void 0,o=function(e,r){if("object"!==t(e)||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var n=i.call(e,"string");if("object"!==t(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(n.key),"symbol"===t(o)?o:String(o)),n)}var o}const r=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.type=e,this.length=r,this.hits=0}var r,i;return r=t,(i=[{key:"hit",value:function(){this.hits++}},{key:"isSunk",value:function(){return this.length===this.hits}}])&&e(r.prototype,i),Object.defineProperty(r,"prototype",{writable:!1}),t}();function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==i(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===i(o)?o:String(o)),n)}var o}var o=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.ships={}}var e,r;return e=t,r=[{key:"addShips",value:function(t,e,r,i){if(t.length-1+e<=10&&t.length-1+r<=10)if("horizontal"===i){this.ships[t.type]={x:[e],y:[r],direction:i};for(var n=e+1;n<=e+t.length-1;)this.ships[t.type].x.push(n),n++}else{this.ships[t.type]={x:[e],y:[r],direction:i};for(var o=r+1;o<=r+t.length-1;)this.ships[t.type].y.push(o),o++}}},{key:"receiveAttack",value:function(t,e){for(var r in this.ships){var i=this.ships[r];i.x.includes(t)&&i.y.includes(e)&&(console.log("ship.hit "+this.ships[r]),i.hit())}}}],r&&n(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();const s=o;var u=new r("battleship",4),l=(new r("carrier",5),new r("cruiser",3),new r("submarine",3),new r("destroyer",2),new s);l.addShips(u,4,4,"horizontal"),l.receiveAttack(5,4)})();